# Example nginx configuration for T2T Training Application
# This configuration demonstrates how to deploy the application with nginx as a reverse proxy
#
# Prerequisites:
# 1. Set DEPLOYMENT_MODE="nginx" in config.py
# 2. Set BACKEND_PUBLIC_URL to the URL where nginx will expose the backend
# 3. Configure backend to bind to 0.0.0.0 or appropriate network interface
#
# Usage:
# 1. Copy this file to /etc/nginx/sites-available/t2t
# 2. Customize the server_name and paths for your environment
# 3. Enable the site: sudo ln -s /etc/nginx/sites-available/t2t /etc/nginx/sites-enabled/
# 4. Test configuration: sudo nginx -t
# 5. Reload nginx: sudo systemctl reload nginx

# Upstream definitions for backend and frontend
upstream t2t_backend {
    # Backend Flask server
    server 127.0.0.1:5001;

    # For multiple backend instances (load balancing):
    # server 127.0.0.1:5001;
    # server 127.0.0.1:5002;
    # server 127.0.0.1:5003;
}

upstream t2t_frontend {
    # Frontend Dash server
    server 127.0.0.1:8050;

    # For multiple frontend instances:
    # server 127.0.0.1:8050;
    # server 127.0.0.1:8051;
}

# Main server block (HTTPS recommended for production)
server {
    listen 80;
    listen [::]:80;
    server_name t2t.example.com;

    # For production, redirect HTTP to HTTPS:
    # return 301 https://$server_name$request_uri;

    # Maximum upload size (for PDF uploads)
    client_max_body_size 100M;

    # Timeouts for long-running requests (PDF downloads)
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;

    # Logging
    access_log /var/log/nginx/t2t_access.log;
    error_log /var/log/nginx/t2t_error.log;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Frontend routes (Dash application)
    location / {
        proxy_pass http://t2t_frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support (if needed in future)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Backend API routes
    location /api/ {
        proxy_pass http://t2t_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS headers (handled by backend, but can be added here if needed)
        # add_header Access-Control-Allow-Origin "*" always;
        # add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        # add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;

        # Handle OPTIONS requests for CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }

    # Rate limiting for API endpoints (optional but recommended)
    # Uncomment and adjust limits as needed
    # limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    # location /api/ {
    #     limit_req zone=api_limit burst=20 nodelay;
    #     proxy_pass http://t2t_backend;
    #     # ... other proxy settings
    # }
}

# HTTPS server block (recommended for production)
# Requires SSL certificates (Let's Encrypt recommended)
#
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name t2t.example.com;
#
#     # SSL certificate configuration
#     ssl_certificate /etc/letsencrypt/live/t2t.example.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/t2t.example.com/privkey.pem;
#
#     # SSL configuration (Mozilla Intermediate profile)
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#
#     # HSTS (HTTP Strict Transport Security)
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#
#     # ... rest of configuration same as HTTP block
#     # (copy all location blocks and settings from above)
# }

# Alternative configuration: Backend on separate subdomain
# This is useful for API versioning or microservices architecture
#
# server {
#     listen 80;
#     server_name api.t2t.example.com;
#
#     location / {
#         proxy_pass http://t2t_backend;
#         # ... proxy settings
#     }
# }
#
# server {
#     listen 80;
#     server_name t2t.example.com;
#
#     location / {
#         proxy_pass http://t2t_frontend;
#         # ... proxy settings
#     }
# }
#
# Then set in config.py:
# DEPLOYMENT_MODE = "nginx"
# BACKEND_PUBLIC_URL = "http://api.t2t.example.com"

# Alternative configuration: Backend on subpath
# Useful when sharing domain with other applications
#
# server {
#     listen 80;
#     server_name example.com;
#
#     # Frontend at root
#     location / {
#         proxy_pass http://t2t_frontend;
#         # ... proxy settings
#     }
#
#     # Backend at /t2t/api/
#     location /t2t/api/ {
#         rewrite ^/t2t/api/(.*) /api/$1 break;
#         proxy_pass http://t2t_backend;
#         # ... proxy settings
#     }
# }
#
# Then set in config.py:
# DEPLOYMENT_MODE = "nginx"
# BACKEND_PUBLIC_URL = "http://example.com/t2t/api"
